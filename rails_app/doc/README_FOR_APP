nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(0,7)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(1,7)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(2,7)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(3,7)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(4,7)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(5,7)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(6,7)' >> /tmp/t.log 2>&1 &


nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(0,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(1,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(2,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(3,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(4,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(5,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(6,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(7,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(8,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(9,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(10,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(11,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(12,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(13,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(14,16)' >> /tmp/t.log 2>&1 &
nohup jruby -J-Xmx1G ./script/runner -e production 'Business.first rescue nil;ParseContactInfo rescue nil ; Business.index_all(15,16)' >> /tmp/t.log 2>&1 &



# Merge cores 0-6 into core 7 - DEV
http://localhost:8983/solr/admin/cores?action=mergeindexes&core=core7&indexDir=/Users/chrisfinne/code/cp-solr/solr/core0/data/index&indexDir=/Users/chrisfinne/code/cp-solr/solr/core1/data/index&indexDir=/Users/chrisfinne/code/cp-solr/solr/core2/data/index&indexDir=/Users/chrisfinne/code/cp-solr/solr/core3/data/index&indexDir=/Users/chrisfinne/code/cp-solr/solr/core4/data/index&indexDir=/Users/chrisfinne/code/cp-solr/solr/core5/data/index&indexDir=/Users/chrisfinne/code/cp-solr/solr/core6/data/index


# Merge cores 0-6 into core 7 - PRODUCTION
http://localhost:8983/solr/admin/cores?action=mergeindexes&core=core7&indexDir=/var/www/cp/solr/solr/core0/data/index&indexDir=/var/www/cp/solr/solr/core1/data/index&indexDir=/var/www/cp/solr/solr/core2/data/index&indexDir=/var/www/cp/solr/solr/core3/data/index&indexDir=/var/www/cp/solr/solr/core4/data/index&indexDir=/var/www/cp/solr/solr/core5/data/index&indexDir=/var/www/cp/solr/solr/core6/data/index

http://localhost:8983/solr/admin/cores?action=mergeindexes&core=core17&indexDir=/var/www/cp/solr/solr/core2/data/index&indexDir=/var/www/cp/solr/solr/core3/data/index&indexDir=/var/www/cp/solr/solr/core4/data/index&indexDir=/var/www/cp/solr/solr/core5/data/index&indexDir=/var/www/cp/solr/solr/core6/data/index&indexDir=/var/www/cp/solr/solr/core7/data/index&indexDir=/var/www/cp/solr/solr/core8/data/index&indexDir=/var/www/cp/solr/solr/core9/data/index&indexDir=/var/www/cp/solr/solr/core10/data/index&indexDir=/var/www/cp/solr/solr/core11/data/index&indexDir=/var/www/cp/solr/solr/core12/data/index&indexDir=/var/www/cp/solr/solr/core13/data/index&indexDir=/var/www/cp/solr/solr/core14/data/index&indexDir=/var/www/cp/solr/solr/core15/data/index

http://localhost:8983/solr/admin/cores?action=mergeindexes&core=core0&indexDir=/var/www/cp/solr/solr/core7/data/index&indexDir=/var/www/cp/solr/solr/core17/data/index

ruby -J-Xmx1G ./script/console 

RSolr.load_java_libs
require "/Users/chrisfinne/code/cp-solr/solr/lib/spatial-solr-1.0-RC5.jar"
require  "/var/www/cp/solr/solr/lib/spatial-solr-1.0-RC5.jar"     

c=RSolr.connect :direct, :solr_home=>"/Users/chrisfinne/code/cp-solr/solr/core0"
c=RSolr.connect :direct, :solr_home=>"/var/www/cp/solr/solr/core0"

c.add Business.first.to_solr

Business.find_in_batches() do |group| 
  h=nil
  puts( (Benchmark.realtime {h=group.collect(&:to_solr)}).to_s)
  puts("hashes for #{group.last.id.to_s}")
  puts Benchmark.realtime {c.add(h)}.to_s 
  puts(group.last.id.to_s+"\n\n")
end

Business.find_in_batches(:conditions=>["zip IN (?)",zips]) do |group| 
  h=nil
  puts( (Benchmark.realtime {h=group.collect(&:to_solr)}).to_s)
  puts("hashes for #{group.last.id.to_s}")
  puts Benchmark.realtime {c.add(h)}.to_s 
  puts(group.last.id.to_s+"\n\n")
end



num=6
inc=(Business.count / num).to_i
threads=[]
ee=[]
mutex = Mutex.new
0.upto(num) do |i|
  threads << Thread.new do 
    e=nil
    thread_num=i.to_s
    begin
      start = i * inc
      the_end = start + inc
      group=nil
      h=nil
      Business.find_in_batches(:conditions=>"id > #{start} AND id <= #{the_end}") do |group|
        h=group.collect(&:to_solr)
        mutex.synchronize do
          c.add(h)
        end
        puts("== #{thread_num} ::: #{group.last.id} : #{start}/#{the_end}")
      end
    rescue Exception=>e
      ee << [thread_num,e]
    end
  end
end
threads.each{|t| t.join};c.commit;c.optimize

num=4
inc=(Business.count / num).to_i
threads=[]
ee=[]
mutex = Mutex.new
0.upto(num) do |i|
  threads << Thread.new do 
    e=nil
    thread_num=i.to_s
    begin
      start = i * inc
      the_end = start + inc
      group=nil
      h=nil
      Business.find_in_batches(:conditions=>"id > #{start} AND id <= #{the_end}") do |group|
        h=group.collect(&:to_solr)
        mutex.synchronize do
          c.add(h)
        end
        puts("== #{thread_num} ::: #{group.last.id} : #{start}/#{the_end}")
      end
    rescue Exception=>e
      ee << [thread_num,e]
    end
  end
end
threads.each{|t| t.join};c.commit;c.optimize


num=4
inc=(Business.count / num).to_i
threads=[]
ee=[]
0.upto(num) do |i|
  threads << Thread.new do 
    e=nil
    thread_num=i.to_s
    begin
      start = i * inc
      the_end = start + inc
      group=nil
      h=nil
      Business.find_in_batches(:conditions=>"id > #{start} AND id <= #{the_end}") do |group|
        c.add(group.collect(&:to_solr))
        puts("== #{thread_num} ::: #{group.last.id} : #{start}/#{the_end}")
      end
    rescue Exception=>e
      ee << [thread_num,e]
    end
  end
end
threads.each{|t| t.join};
wait=false
c.update %Q!<commit waitFlush="#{wait}" waitSearcher="#{wait}" />!




Business.find_in_batches do |group| 
  h=nil
  puts( (Benchmark.realtime {h=group.collect(&:to_solr)}).to_s)
  puts("hashes for #{group.last.id.to_s}")
  puts Benchmark.realtime {Solr.add_to_index(h,false)}.to_s 
  puts(group.last.id.to_s+"\n\n")
end




>> arr=[];0.upto(17){|i| Solr.set_connection('core'+i.to_s);arr << Solr.search("*:*")['numFound']}
=> 0
>> arr
=> [0, 0, 1280554, 1161207, 1128502, 1208461, 1206262, 1243311, 1303512, 1156273, 1276506, 1241349, 1207843, 1157057, 1318666, 1246779, 0, 0]

arr=[]
0.upto(16) do |i|
  Solr.set_connection("solr#{i}")
  r=Solr.search(:q=>'*:*', :fl=>'id', :per_page=>1000)
  r['numFound']
  ['docs'].collect{|d| d['id'].to_i}

end

